import numpy as np
import matplotlib.pyplot as plt

from bandit import BanditOptimistic


BANDIT_PROBS = [0.25, 0.5, 0.75]
NUM_TRIALS = 100_000


def experiment():
    bandits = [BanditOptimistic(p) for p in BANDIT_PROBS]

    num_times_optimal = 0

    optimal_j = np.argmax([b.p for b in bandits])
    print(f"Optimal bandit: {optimal_j}")

    rewards = np.zeros(NUM_TRIALS)

    for i in range(NUM_TRIALS):
        j = np.argmax([b.p_estimate for b in bandits])

        if j == optimal_j:
            num_times_optimal += 1

        x = bandits[j].pull()
        bandits[j].update(x)

        rewards[i] = x

    for b in bandits:
        print(f"Mean Estimate: {b.p_estimate}")

    print(f"Total rewards earned: {rewards.sum()}")
    print(f"Overall win rate: {rewards.sum() / NUM_TRIALS}")
    print(f"Num of times optimal bandit was pulled: {num_times_optimal}")
    print(
        f"Number of times suboptimal bandits were pulled: {NUM_TRIALS - num_times_optimal}"
    )
    print(f"Number of times each bandits were pulled: {[b.n_samples for b in bandits]}")

    win_rates = np.cumsum(rewards) / (np.arange(NUM_TRIALS) + 1)
    plt.plot(win_rates)
    plt.plot(np.ones(NUM_TRIALS) * np.max(BANDIT_PROBS))
    plt.show()


if __name__ == "__main__":
    experiment()
