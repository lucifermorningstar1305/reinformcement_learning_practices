import numpy as np
import matplotlib.pyplot as plt

from bandit import BanditUCB


BANDIT_PROBS = [0.25, 0.5, 0.75]
NUM_TRIALS = 100_000


def ucb(mean: float, N: int, n_j: int) -> float:
    """Function to calculate the upper-confidence bound for bandit j"""

    return mean + np.sqrt(2 * np.log(N) / n_j)


def experiment():
    bandits = [BanditUCB(p) for p in BANDIT_PROBS]

    rewards = np.zeros(NUM_TRIALS)
    total_plays = 0

    print(f"Optimal Bandit: {np.argmax([b.p for b in bandits])}")

    # play each bandit once
    for j in range(len(bandits)):
        x = bandits[j].pull()
        bandits[j].update(x)
        total_plays += 1

    for i in range(NUM_TRIALS):
        j = np.argmax([ucb(b.p_estimate, total_plays, b.n_samples) for b in bandits])

        x = bandits[j].pull()
        bandits[j].update(x)

        total_plays += 1

        rewards[i] = x

    print(f"Total rewards earned: {rewards.sum()}")
    print(f"Overall win rate: {rewards.sum() / NUM_TRIALS}")
    print(
        f"Number of times each bandits were selected: {[b.n_samples for b in bandits]}"
    )

    for b in bandits:
        print(f"Mean Estimate: {b.p_estimate}")

    win_rates = np.cumsum(rewards) / (np.arange(NUM_TRIALS) + 1)

    plt.plot(win_rates)
    plt.plot(np.ones(NUM_TRIALS) * np.max(BANDIT_PROBS))
    plt.xscale("log")
    plt.show()

    # Linear scale
    plt.plot(win_rates)
    plt.plot(np.ones(NUM_TRIALS) * np.max(BANDIT_PROBS))
    plt.show()


if __name__ == "__main__":
    experiment()
