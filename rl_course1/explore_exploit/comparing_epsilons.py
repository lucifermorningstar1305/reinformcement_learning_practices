from typing import List

import numpy as np
import matplotlib.pyplot as plt

from bandit import GaussianBandit


def experiment(bandit_means: List, eps: float, num_trials: int) -> np.ndarray:
    """Function to perform the Epsilon-Greedy Algorithm"""

    bandits = [GaussianBandit(m) for m in bandit_means]

    rewards = np.zeros(num_trials)
    num_times_explored = 0
    num_times_exploited = 0
    num_times_optimal = 0
    num_times_suboptimal = 0

    optimal_j = np.argmax([b.m for b in bandits])

    for i in range(num_trials):
        if np.random.random() < eps:
            j = np.random.choice(len(bandits))
            num_times_explored += 1

        else:
            j = np.argmax([b.m_estimate for b in bandits])
            num_times_exploited += 1

        if j == optimal_j:
            num_times_optimal += 1

        if j != optimal_j:
            num_times_suboptimal += 1

        x = bandits[j].pull()
        bandits[j].update(x)

        rewards[i] = x

    print(f"Total reward: {rewards.sum()}")
    print(f"Num of times explored: {num_times_explored}")
    print(f"Num of times exploited: {num_times_exploited}")
    print(f"Num of times optimal lever/bandit was pulled: {num_times_optimal}")

    win_rate = np.cumsum(rewards) / (np.arange(num_trials) + 1)

    plt.plot(win_rate)

    for m in bandit_means:
        plt.plot(np.ones(num_trials) * m, label=str(m))

    plt.xscale("log")
    plt.legend()
    plt.show()

    print(
        f"percentage of suboptimal pulls for eps={eps} is: {(num_times_suboptimal) / num_trials * 100}%"
    )

    for b in bandits:
        print(f"Mean estimate: {b.m_estimate}")

    print("-" * 20)
    print("\n\n")

    return win_rate


if __name__ == "__main__":
    bandit_means = [1.5, 2.5, 3.5]
    c_1 = experiment(bandit_means=bandit_means, eps=0.1, num_trials=100_000)
    c_05 = experiment(bandit_means=bandit_means, eps=0.05, num_trials=100_000)
    c_01 = experiment(bandit_means=bandit_means, eps=0.01, num_trials=100_000)

    # Log-scale plot
    plt.plot(c_1, label="eps=0.1")
    plt.plot(c_05, label="eps=0.05")
    plt.plot(c_01, label="eps=0.01")
    plt.legend()
    plt.xscale("log")
    plt.show()

    # Linear-scale plot
    plt.plot(c_1, label="eps=0.1")
    plt.plot(c_05, label="eps=0.05")
    plt.plot(c_01, label="eps=0.01")
    plt.legend()
    plt.show()
