import numpy as np


class Bandit:
    def __init__(self, p: float):
        self.n_samples = 0
        self.p_estimate = 0
        self.p = p

    def pull(self):
        """Function to simulate pulling a bandit lever and receiving a reward of 0/1"""
        return np.random.random() < self.p

    def update(self, x: int):
        self.n_samples += 1
        self.p_estimate = (
            1 / self.n_samples * ((self.n_samples - 1) * self.p_estimate + x)
        )


class GaussianBandit:
    def __init__(self, m: float):
        self.n_samples = 0
        self.m_estimate = 0
        self.m = m

    def pull(self) -> float:
        """Function to simulate pulling a bandit lever and receiving a gaussian reward"""
        return np.random.randn() + self.m

    def update(self, x: float):
        self.n_samples += 1
        self.m_estimate = (
            1 / self.n_samples * ((self.n_samples - 1) * self.m_estimate + x)
        )


class BanditOptimistic:
    def __init__(self, p: float):
        self.p = p
        self.p_estimate = 10
        self.n_samples = 1

    def pull(self) -> bool:
        """Function to simulate pulling a bandit lever and receiving a reward of 0/1"""
        return np.random.random() < self.p

    def update(self, x: int):
        self.n_samples += 1
        self.p_estimate = (
            1 / self.n_samples * ((self.n_samples - 1) * self.p_estimate + x)
        )


class BanditUCB:
    def __init__(self, p: float):
        self.p = p
        self.p_estimate = 0
        self.n_samples = 0

    def pull(self) -> bool:
        """Function to simulate pulling a bandit lever and receiving a reward of 0/1"""
        return np.random.random() < self.p

    def update(self, x: int):
        self.n_samples += 1
        self.p_estimate = (
            1 / self.n_samples * ((self.n_samples - 1) * self.p_estimate + x)
        )


class BanditThompson:
    def __init__(self, p: float):
        self.p = p
        self.n_samples = 0
        self.a = 1
        self.b = 1

    def pull(self) -> bool:
        """Function to simulate pulling a bandit lever and receiving a reward of 0/1"""
        return np.random.random() < self.p

    def sample(self) -> float:
        return np.random.beta(self.a, self.b)

    def update(self, x: int):
        self.a += x
        self.b += 1 - x
        self.n_samples += 1


class BanditThompsonGaussian:
    def __init__(self, m: float):
        self.m = m  # Represents the true mean of the bandit
        self.tau = 1.0
        self.lambda_ = 1.0
        self.m_estimated = 0.0
        self.n_samples = 0

    def pull(self) -> float:
        """Function to simulate pulling a bandit lever and receiving a gaussian reward"""
        return np.random.randn() / np.sqrt(self.tau) + self.m

    def sample(self) -> float:
        return np.random.randn() / np.sqrt(self.lambda_) + self.m_estimated

    def update(self, x: int):
        self.m_estimated = (self.tau * x + self.lambda_ * self.m_estimated) / (
            self.lambda_ + self.tau
        )
        self.lambda_ += self.tau

        self.n_samples += 1
