from typing import List

import numpy as np
import matplotlib.pyplot as plt
import os

from bandit import BanditThompsonGaussian
from scipy.stats import norm

np.random.seed(1)

BANDIT_MEANS = [5, 10, 20]
NUM_TRIALS = 2000


def plot(bandits: List, trial: int):
    fig = plt.figure()
    x = np.linspace(-3, 6, 200)
    for b in bandits:
        y = norm.pdf(x, b.m_estimated, np.sqrt(1.0 / b.lambda_))
        plt.plot(
            x,
            y,
            label=f"real mean: {b.m:.4f}, num plays: {b.n_samples}",
        )

    plt.title(f"Bandit distribution after {trial} trials")
    plt.legend()
    fig.savefig(f"./media/thompson_gaussian_trial={trial}.png")


def experiment():
    bandits = [BanditThompsonGaussian(m) for m in BANDIT_MEANS]

    log_pts = [5, 10, 20, 50, 100, 200, 500, 1000, 1500, 1999]
    rewards = np.zeros(NUM_TRIALS)

    # Because the initial means are far away from the true means
    # therefore some exploration is required to fix this issue.

    for _ in range(20):
        for j in range(len(bandits)):
            x = bandits[j].pull()
            bandits[j].update(x)

    for i in range(NUM_TRIALS):
        j = np.argmax([b.sample() for b in bandits])
        x = bandits[j].pull()
        bandits[j].update(x)

        rewards[i] = x

        if i in log_pts:
            plot(bandits=bandits, trial=i)

    print(f"Total rewards earned: {rewards.sum()}")
    print(f"overall win rate: {rewards.sum() / NUM_TRIALS}")
    print(f"num of times each bandits were selected: {[b.n_samples for b in bandits]}")

    for b in bandits:
        print(f"Mean estimate: {b.m_estimated}")


if __name__ == "__main__":
    if not os.path.exists("./media"):
        os.mkdir("./media")

    experiment()
